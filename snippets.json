{
/*
	 // Place your snippets for PHP here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/

	"anchor": {
		"prefix": "anchor",
		"body": "anchor('${1:url}', '${2:linkname}', '${3:attributes}');",
		"description": "CI - Anchor Helper"
	},
	"ci_base": {
		"prefix": "ci_base",
		"body": "base_url('${1:}')",
		"description": "CI - URL Helper - base_url"
	},
	"ciline": {
		"prefix": "ciline",
		"body": "// ------------------------------------------------------------------------",
		"description": "ciline"
	},
	"ci_start": {
		"prefix": "ci_start",
		"body": "defined('BASEPATH') OR exit('No direct script access allowed');",
		"description": "CI - Generic Starter Class"
	},
	"controller": {
		"prefix": "controller",
		"body": [
			"defined('BASEPATH') OR exit('No direct script access allowed');",
			"/*",
			" * @project   Proje Adı",
			" * @author  Ahmet Taşhan",
			" * @link  http://www.ahmettashan.com/",
			" * @since  Version 2.0.0",
			" * @date  $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
			" */",
			"",
			"class ${1:ControllerName} extends CI_Controller {",
			"",
			"	public function __construct(){",
			"		parent::__construct();",
			"		$$this->Auto_load->login_control();",
			"	}",
			"",
			"	public function index()",
			"	{",
			"		$2",
			"	}",
			"}"
		  ],
		"description": "CI - Base Controller"
	},
	"_cookie": {
		"prefix": "_cookie",
		"body": "$$this->input->cookie()('${1:name}');",
		"description": "CI - Cookie"
	},
	"crud": {
		"prefix": "crud",
		"body": [
			"defined('BASEPATH') OR exit('No direct script access allowed');",
			"/*",
			" * @project   Proje Adı",
			" * @author  Ahmet Taşhan",
			" * @link  http://www.ahmettashan.com/",
			" * @since  Version 2.0.0",
			" * @date  $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
			" */",
			" ",
			"class ${1:Controllername} extends CI_Controller {",
			"",
			"	public function __construct()",
			"	{",
			"		parent::__construct();",
			"",
			"	}",
			"",
			"	// List all your items",
			"	public function index()",
			"	{",
			"",
			"	}",
			"",
			"	// Add a new item",
			"	public function add()",
			"	{",
			"",
			"	}",
			"",
			"	//Update one item",
			"	public function update( $$id = NULL )",
			"	{",
			"",
			"	}",
			"",
			"	//Delete one item",
			"	public function delete( $$id = NULL )",
			"	{",
			"",
			"	}",
			"}"
		  ],
		"description": "CI - Simple CRUD Controller"
	},
	"db_affected": {
		"prefix": "db_affected",
		"body": "\r$$this->db->affected_rows(${1});\r",
		"description": "CI - Active Record DB Affected Rows"		
	},
	"db_delete": {
		"prefix": "db_delete",
		"body": "$$this->db->delete('${1:Table}');\n",
		"description": "CI - Active Record DB Delete"		
	},
	"db_from": {
		"prefix": "db_from",
		"body": "$$this->db->from('${1:Table}');\n",
		"description": "CI - Active Record DB From"
	},
	"db_get": {
		"prefix": "db_get",
		"body": "$$this->db->get('${1:Table}'${2:, ${3:limit}, ${4:offset}});\n",
		"description": "CI - Active Record DB Get"
	},
	"db_group": {
		"prefix": "db_group",
		"body": "$$this->db->group_by('${1:title}');\n",
		"description": "CI - Active Record DB Group By"
	},
	"db_insert": {
		"prefix": "db_insert",
		"body": "$$this->db->insert('${1:Table}', $${2:object});\n",
		"description": "CI - Active Record DB Insert"
	},
	"db_insert_id": {
		"prefix": "db_insert_id",
		"body": "$$this->db->insert_id($1);\n$2",
		"description": "CI - Active Record DB Last Inserted Id"
	},
	"db_join": {
		"prefix": "db_join",
		"body": "$$this->db->join('${1:Table}', '${2:table.column} ${3:=} ${4:table.column}'${5:, 'left'});\n",
		"description": "CI - Active Record DB Join"
	},
	"db_last": {
		"prefix": "db_last",
		"body": "$$this->db->last_query($1);\n$2",
		"description": "CI - Active Record DB Helper Functions"
	},
	"db_limit": {
		"prefix": "db_limit",
		"body": "$$this->db->limit(${1:num});\n",
		"description": "CI - Active Record DB Helper Functions"
	},
	"db_num_fields": {
		"prefix": "db_num_fields",
		"body": "\r\n$${1:Var}->num_fields($2);\r\n",
		"description": "CI - Active Record DB Num Fields"
	},
	"db_num_rows": {
		"prefix": "db_num_rows",
		"body": "\r\n$${1:Var}->num_rows($2);\r\n",
		"description": "CI - Active Record DB Num Rows"
	},
	"db_order": {
		"prefix": "db_order",
		"body": "$$this->db->order_by('${1:title}', '${2:desc}');\n$3",
		"description": "CI - Active Record DB Order By"
	},
	"db_result": {
		"prefix": "db_result",
		"body": "\r\n$${1:Var}->result($2);\r\n$3",
		"description": "CI - Active Record DB Result"
	},
	"db_result_array": {
		"prefix": "db_result_array",
		"body": "\r\n$${1:Var}->result_array($2);\r\n",
		"description": "CI - Active Record DB Result Array"
	},
	"db_row": {
		"prefix": "db_row",
		"body": "\r\n$${1:Var}->row();\r\n",
		"description": "CI - Active Record DB Row"
	},
	"db_row_array": {
		"prefix": "db_row_array",
		"body": "\r\n$${1:Var}->row_array();\r\n",
		"description": "CI - Active Record DB Row Array"
	},
	"db_select": {
		"prefix": "db_select",
		"body": "$$this->db->select('${1:field1, field2}');\n",
		"description": "CI - Active Record DB Select"
	},
	"db_truncate": {
		"prefix": "db_truncate",
		"body": "$$this->db->truncate('${1:Table}');\n",
		"description": "CI - Active Record Truncate Table"
	},
	"db_update": {
		"prefix": "db_update",
		"body": "$$this->db->update('${1:Table}', $${2:object});\n",
		"description": "CI - Active Record DB Update"
	},
	"db_where": {
		"prefix": "db_where",
		"body": "$$this->db->where('${1:Field / comparison}', $${2:Value});\n",
		"description": "CI - Active Record DB Where"
	},
	"echopre": {
		"prefix": "echopre",
		"body": "\necho \"<pre>\";\nprint_r ($${1:variable});\necho \"</pre>\";\n",
		"description": "Pre tag in echo"
	},
	"email": {
		"prefix": "email",
		"body": "$$this->load->library('email');\n\n$$this->email->from('${1:email@email.com}', '${2:Name}');\n$$this->email->to('${3:someone@example.com}');\n$$this->email->cc('${4:another@example.com}');\n$$this->email->bcc('${5:and@another.com}');\n\n$$this->email->subject('${6:subject}');\n$$this->email->message('${7:message}');\n\n$$this->email->send();\n\necho $$this->email->print_debugger();\n",
		"description": "CI - Email Boilerplate"
	},
	"form_validation": {
		"prefix": "form_validation",
		"body": "$$this->form_validation->set_rules('${1:fieldname}', '${2:fieldlabel}', '${3:trim}|${4:required}|${5:min_length[${6:5}]}|${7:max_length[${8:12}]}');\n",
		"description": "CI - Form Validation Rule"
	},
	"form_validation_run": {
		"prefix": "form_validation_run",
		"body": "\nif ($$this->form_validation->run() == ${1:TRUE or FALSE}) {\n\t${2:# code...}\n} else {\n\t${3:# code...}\n}\n",
		"description": "CI - Form Validation Run"
	},
	"form_validation_sv": {
		"prefix": "form_validation_sv",
		"body": "$$this->form_validation->set_value('${1:field}')\n",
		"description": "CI - Form Validation Set Value"
	},
	"_get": {
		"prefix": "_get",
		"body": "$$this->input->get('${1:name}')\n",
		"description": "CI - $_GET"
	},
	"get_instance": {
		"prefix": "get_instance",
		"body": "\n$${1:CI} =& get_instance($2);\n",
		"description": "CI - Assign the CodeIgniter object to a variable"
	},
	"_get_post": {
		"prefix": "_get_post",
		"body": "$$this->input->get_post('${1:name}');\n",
		"description": "CI - $_GET / $_POST"
	},
	"get_request_header": {
		"prefix": "get_request_header",
		"body": "$$this->input->get_request_header($1);\n",
		"description": "CI - Get request header"
	},
	"ip_address": {
		"prefix": "ip_address",
		"body": "$$this->input->ip_address($1);\n",
		"description": "CI - Get ip address"
	},
	"is_ajax": {
		"prefix": "is_ajax",
		"body": "$$this->input->is_ajax_request($1)\n",
		"description": "CI - Is ajax request"
	},
	"is_cli": {
		"prefix": "is_cli",
		"body": "$$this->input->is_cli_request($1)\n",
		"description": "CI - Is CLI request"
	},
	"library": {
		"prefix": "library",
		"body": "\ndefined('BASEPATH') OR exit('No direct script access allowed');\n\nclass ${1:LibraryName}\n{\n\tprotected $$ci;\n\n\tpublic function __construct()\n\t{\n        $$this->$ci =& get_instance();\n\t}\n\n\t$0\n\n}",
		"description": "CI - New Library"
	},
	"load_helper": {
		"prefix": "load_helper",
		"body": "$$this->load->helper('${1:Helper Name}');\n",
		"description": "CI - Load Helper File"
	},
	"load_library": {
		"prefix": "load_library",
		"body": "$$this->load->library('${1:Library Name}'${2:, $${3:config}});\n",
		"description": "CI - Load Library"
	},
	"load_model": {
		"prefix": "load_model",
		"body": "$$this->load->model('${1:Model File}');\n",
		"description": "CI - Load Model"
	},
	"load_module": {
		"prefix": "load_module",
		"body": "$$this->load->module('${1:Module Directory/Name}');\n",
		"description": "HMVC CI - Load Module Controller"
	},
	"load_view": {
		"prefix": "load_view",
		"body": "$$this->load->view('${1:View File}'${2:, $${4:data}}${3:, FALSE});\n",
		"description": "CI - Load View"
	},
	"log": {
		"prefix": "log",
		"body": "\nlog_message('${1:error}','${2:message}');\n",
		"description": "CI - Log Message"
	},
	"migration": {
		"prefix": "migration",
		"body": "\ndefined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Migration_${1:Class_name} extends ${2:CI}_Migration {\n\n\tpublic function __construct()\n\t{\n\t\t$$this->load->dbforge();${3:\n\t\t$$this->load->database($4);}\n\t}\n\n\tpublic function up() {\n\t\t${5}\n\t}\n\n\tpublic function down() {\n\t\t${6}\n\t}\n\n}\n\n/* End of file $1.php */\n",
		"description": "CI - Base Migration"
	},
	"model": {
		"prefix": "model",
		"body": [
			"defined('BASEPATH') OR exit('No direct script access allowed');",
			"/*",
			" * @project   Proje Adı",
			" * @author  Ahmet Taşhan",
			" * @link  http://www.ahmettashan.com/",
			" * @since  Version 2.0.0",
			" * @date  $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
			" */",
			"",
			"class ${1:ModelName} extends CI_Model {",
			"",
			"	public function ${2:FunctionName} ()",
			"	{",
			"		$3",
			"	}",
			"}"
		  ],
		"description": "CI - Base Model"
	},
	"output_json": {
		"prefix": "output_json",
		"body": "$$this->output->set_content_type('application/json')->set_output(json_encode(${1:$json}));\n",
		"description": "CI - output Json"
	},
	"output_profiler": {
		"prefix": "output_profiler",
		"body": "$$this->output->enable_profiler(${1:TRUE});\n",
		"description": "CI - Enable Profiler"
	},
	"pagination": {
		"prefix": "pagination",
		"body": "$$this->load->library('pagination');\n\n$$config['base_url'] = '${1:url}';\n$$config['total_rows'] = ${2:100};\n$$config['per_page'] = ${3:10};\n$$config['uri_segment'] = ${4:3};\n$$config['num_links'] = ${4:4};\n$$config['full_tag_open'] = '${5:<p>}';\n$$config['full_tag_close'] = '${6:</p>}';\n$$config['first_link'] = '${7:First}';\n$$config['first_tag_open'] = '${8:<div>}';\n$$config['first_tag_close'] = '${9:</div>}';\n$$config['last_link'] = '${10:Last}';\n$$config['last_tag_open'] = '${11:<div>}';\n$$config['last_tag_close'] = '${12:</div>}';\n$$config['next_link'] = '${13:&gt};';\n$$config['next_tag_open'] = '${14:<div>}';\n$$config['next_tag_close'] = '${15:</div>}';\n$$config['prev_link'] = '${16:&lt;}';\n$$config['prev_tag_open'] = '${17:<div>}';\n$$config['prev_tag_close'] = '${18:</div>}';\n$$config['cur_tag_open'] = '${19:<b>}';\n$$config['cur_tag_close'] = '${20:</b>}';\n\n$$this->pagination->initialize($$config);\n\necho $$this->pagination->create_links();\n",
		"description": "CI - Pagination Boilerplate"
	},
	"_post": {
		"prefix": "_post",
		"body": "$$this->input->post('${1:name}');\n",
		"description": "CI - $_POST"
	},
	"_redirect": {
		"prefix": "_redirect",
		"body": "\nredirect('${1:}','location',${2:});\n",
		"description": "CI - URL Helper - redirect with response code"	
	},
	"redirect": {
		"prefix": "redirect",
		"body": "\nredirect('${1:}','refresh');\n",
		"description": "CI - URL Helper - redirect"
	},
	"request_headers": {
		"prefix": "request_headers",
		"body": "$$this->input->request_headers();\n",
		"description": "CI - Request Headers"
	},
	"run_validation": {
		"prefix": "run_validation",
		"body": "$$this->form_validation->run();\n",
		"description": "CI - Run form validation"		
	},
	"_server": {
		"prefix": "_server",
		"body": "$$this->input->server('${1:name}');\n",
		"description": "CI - $_SERVER"		
	},
	"session_all_userdata": {
		"prefix": "session_all_userdata",
		"body": "\r$$this->session->all_userdata();\r\n",
		"description": "CI - Session - Retrieving All Session Data"
	},
	"session_sess_destroy": {
		"prefix": "session_sess_destroy",
		"body": "\r$$this->session->sess_destroy();\r\n",
		"description": "CI - Session - Destroying a Session"		
	},
	"session_set_userdata": {
		"prefix": "session_set_userdata",
		"body": "\r\n$$array = array(\r\n\t'${1:key}' => '${2:value}'\r\n);\r\n\r$$this->session->set_userdata( $$array );\r\n",
		"description": "CI - Session - Adding Custom Session Data"
	},
	"session_unset_userdata": {
		"prefix": "session_unset_userdata",
		"body": "\r$$this->session->unset_userdata('${1:some_name}');\r\n",
		"description": "CI - Session - Removing Session Data"		
	},
	"session_userdata": {
		"prefix": "session_userdata",
		"body": "\r$$this->session->userdata('${1:item}');\r\n",
		"description": "CI - Session - Retrieving Session Data"		
	},
	"set_cookie": {
		"prefix": "set_cookie",
		"body": "$$this->input->set_cookie('${1:name}', '${2:value}', '${3:expire}', '${4:domain}', '${5:path}','${6:prefix}', '${7:secure}');\n",
		"description": "CI - Set Cookie"
	},
	"set_flashdata": {
		"prefix": "set_flashdata",
		"body": "$$this->session->set_flashdata('${1:name}', '${2:value}');\n",
		"description": "CI - Set flashdata"
	},
	"set_json": {
		"prefix": "set_json",
		"body": "$$this->output->set_content_type('application/json');\n",
		"description": "CI - Set content type to json"
	},
	"site": {
		"prefix": "site",
		"body": "\nsite_uri('${1:}')\n",
		"description": "CI - URL Helper - site_url"
	},
	"this": {
		"prefix": "this",
		"body": "$$this->$1",
		"description": "PHP - $this or other object use"		
	},
	"unit_run": {
		"prefix": "unit_run",
		"body": "$$this->unit->run(\n\t$$result = ${1},\n\t$$expected = ${2:TRUE}${3:,\n\t'${1}'}${4:,\n\t\\htmlentities($$result).' == '. \\htmlentities($$expected)}\n);\n",
		"description": "CI - Unit Run"		
	},
	"upload": {
		"prefix": "upload",
		"body": "\n$$config['upload_path'] = '${1:./uploads/}';\n$$config['allowed_types'] = '${2:gif|jpg|png}';\n$$config['max_size']  = '${3:100}';\n$$config['max_width']  = '${4:1024}';\n$$config['max_height']  = '${5:768}';\n\n$$this->load->library('upload', $$config);\n\nif ( ! $$this->upload->do_upload()){\n\t$$error = array('error' => $$this->upload->display_errors());\n}\nelse{\n\t$$data = array('upload_data' => $$this->upload->data());\n\techo \"success\";\n}\n",
		"description": "CI - Upload Boilerplate"		
	},
	"uri_segment": {
		"prefix": "uri_segment",
		"body": "$$this->uri->segment(${1:3})\n",
		"description": "CI - URI Segment"
	},
	"user_agent": {
		"prefix": "user_agent",
		"body": "$$this->input->user_agent()\n",
		"description": "CI - Get user agent"
	},
	"valid_ip": {
		"prefix": "valid_ip",
		"body": "$$this->input->valid_ip('${1:ip}')\n",
		"description": "CI - Valid IP"
	}

}
